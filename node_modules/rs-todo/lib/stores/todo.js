'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.store = exports.actions = exports.messages = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _reflux = require('reflux');

var _reflux2 = _interopRequireDefault(_reflux);

var _axios = require('axios');

var _axios2 = _interopRequireDefault(_axios);

var _socket = require('socket.io-client');

var _socket2 = _interopRequireDefault(_socket);

var _rsConfig = require('rs-config');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var id = 1;

var messages = exports.messages = {
    afterCreate: 'Successfully created new todo item entitled :title',
    afterDelete: 'Successfully deleted a todo item'
};

var actions = exports.actions = _reflux2.default.createActions({ //must be constant
    "create": { asyncResult: true },
    "upsert": { asyncResult: true },
    "delete": { asyncResult: true },
    "sync": { asyncResult: true }
});

var store = exports.store = _reflux2.default.createStore({ //must be constant
    listenables: actions,
    init: function init() {
        var socket = _socket2.default.connect(_rsConfig.baseUrl);
        var self = this;
        this.records = [];
        this.refresh();
        socket.on('localTodo:changed', function () {
            self.refresh();
        });
    },
    refresh: function refresh() {
        var self = this;
        _rsConfig.resource.get('/localTodos').then(function (res) {
            self.records = res.data;
            actions.sync.completed(res);
            self.trigger();
        }).catch(function (err) {
            actions.sync.failed(err);
        });
    },
    onCreate: function onCreate(title) {
        _rsConfig.resource.put('/localTodos', { title: title }).then(function (res) {
            actions.create.completed(_extends({}, res, { tokens: { title: res.data.title } }));
        }).catch(function (err) {
            actions.create.failed(err);
        });
    },
    onUpsert: function onUpsert(todo) {
        actions.upsert.completed();
    },
    onDelete: function onDelete(id) {
        _rsConfig.resource.delete('/localTodos'.concat('/'.concat(id))).then(function (res) {
            actions.delete.completed(res);
        }).catch(function (err) {
            actions.delete.completed(err);
        });
    }
});