import Reflux from 'reflux';
import axios from 'axios';
import io from 'socket.io-client';
import {resource, baseUrl} from 'rs-config';
import Rhaboo from 'rhaboo';

export const persistent = Rhaboo.persistent('todo');

export const messages = {
    afterCreate: 'Successfully created new todo item entitled :title',
    afterDelete: 'Successfully deleted a todo item'
}

export const actions = Reflux.createActions({ //must be constant
    "create": {asyncResult: true},
    "upsert": {asyncResult: true},
    "delete": {asyncResult: true},
    "toggle": {asyncResult: true},
    "setFilter": {},
    "unsetFilter": {},
    "fetch": {asyncResult: true},
    "sync": {asyncResult: true}
});

export const store = Reflux.createStore({ //must be constant
    listenables: actions,
    init() {
        const socket = io.connect(baseUrl);
        let self = this;
        this.records = [];
        this.where = {};
        this.refresh();
        socket.on('localTodo:changed', () => {
            self.refresh();
        });
    },
    refresh() {
        let self = this;
        resource.get('/localTodos', {params: {filter: {where: this.where}}}).then((res) => {
            self.records = res.data;
            actions.fetch.completed(res);
            self.trigger();
        }).catch((err) => {
            actions.fetch.failed(err);
        });
    },
    onFetch(){
        this.refresh();
    },
    onCreate(title){
        resource.post('/localTodos', {title: title}).then((res) => {
            actions.create.completed({...res, tokens: {title: res.data.title}})
            ;
        }).catch((err) => {
            actions.create.failed(err);
        });
    },
    onUpsert(todo){
        actions.upsert.completed();
    },
    onToggle(id, completed){
        resource.put('/localTodos'.concat('/'.concat(id)), {completed}).then((res) => {
            actions.toggle.completed(res);
        }).catch((err) => {
            actions.toggle.failed(err);
        });
    },
    onDelete(id){
        resource.delete('/localTodos'.concat('/'.concat(id))).then((res) => {
            actions.delete.completed(res);
        }).catch((err) => {
            actions.delete.completed(err);
        });
    },
    onSetFilter(key, value){
        this.where[key] = value;
        this.refresh();
    },
    onUnsetFilter(key){
        delete this.where[key];
        this.refresh();
    }
});