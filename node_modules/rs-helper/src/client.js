import _ from 'underscore';

export const getCurrentPath = () => {
    return window.location.hash.replace(/(#\/)|(\?.*)|(\/$)/gmi, '');
}

export const getPersistentStore = (persistent, alias, componentName, defaultValue) => {
    let path = getCurrentPath();
    let persist = persistent[alias + "." + path + "." + componentName];
    return persist === undefined ? defaultValue : persist;
}

export const setPersistentStore = (persistent, alias, componentName, value) => {
    let path = getCurrentPath();
    return persistent.write(alias + "." + path + "." + componentName, value);
}

export const getPersistentStoreGroup = (persistent, alias, componentName) => {
    let path = getCurrentPath();
    return new Promise((resolve, reject) => {
        let matches = _.map(persistent, (obj, key) => {
            if (/^RS.*/.test(key)) {
                let lookup = "^" + alias + "." + path;
                if (typeof componentName !== "undefined") {
                    lookup += "." + componentName;
                }
                let regex = new RegExp(lookup);
                if (regex.test(key)) {
                    let idx = key.replace(regex, '').slice(1);
                    return {key: idx, value: obj};
                }
            }
        });
        matches = _.omit(matches, _.isEmpty);
        matches = _.values(matches);
        resolve(matches);
    });
}

export const bootstrapMessage = (component, actions, messages, cb, hook = 'after', childrenHook = 'completed') => {
    _.each(actions, (obj, key) => {
        let defMessage = messages[hook.concat(key.charAt(0).toUpperCase().concat(key.slice(1)))];
        if (typeof defMessage !== 'undefined') {
            component.listenTo(actions[key][childrenHook], (data) => {
                let message = defMessage;
                if (data instanceof Object && typeof data.tokens !== 'undefined') {
                    _.each(data.tokens, (t, k) => {
                        message = message.replace(new RegExp(":".concat(k), "g"), t);
                    });
                }
                cb(message);
            });
        }
    });
}