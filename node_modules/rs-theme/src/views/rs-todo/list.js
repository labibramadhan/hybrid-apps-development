import React from 'react';
import _ from 'underscore';
import Reflux from 'reflux';
import MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';
import {List, ListItem} from 'material-ui/List';
import Checkbox from 'material-ui/Checkbox';
import {grey400} from 'material-ui/styles/colors';
import IconButton from 'material-ui/IconButton';
import MoreVertIcon from 'material-ui/svg-icons/navigation/more-vert';
import IconMenu from 'material-ui/IconMenu';
import MenuItem from 'material-ui/MenuItem';
import {RSAlert} from '../alert';
import {TodoStore, TodoActions, TodoPersistent} from 'rs-todo';
import {getPersistentStore, getPersistentStoreGroup, setPersistentStore} from 'rs-helper/lib/client';

export const alias = "RSTodoList";

export const RSTodoListConfigurator = {
    default: {
        title: "",
        buttonLink: {
            route: "todo.add"
        },
        buttonText: "New Todo",
        onMenuChange(value, props) {
            return new Promise((resolve, reject) => {
                let persist = setPersistentStore(TodoPersistent, alias, 'filter.completed', value);
                TodoActions.setFilter('completed', value);
                resolve()
            });
        },
        selectedMenu(props) {
            return getPersistentStore(TodoPersistent, alias, 'filter.completed', undefined);
        },
        menuItems: [
            {value: undefined, text: 'All'},
            {value: false, text: 'Active'},
            {value: true, text: 'Completed'}
        ]
    }
}

export const RSTodoList = React.createClass({
    mixins: [
        Reflux.ListenerMixin
    ],

    getInitialState(){
        return {};
    },

    componentWillMount() {
        const self = this;
        self.listenTo(TodoStore, 'updateClass');
        getPersistentStoreGroup(TodoPersistent, alias, 'filter').then((filters) => {
            _.each(filters, (obj) => {
                TodoActions.setFilter(obj.key, obj.value);
            });
        });
        this.listenTo(TodoActions.delete.confirmed, (id) => {
            TodoActions.delete(id)
        });
    },

    updateClass() {
        this.forceUpdate();
    },

    render() {
        const self = this;
        return (
            <div>
                <List>
                    {TodoStore.records.map((t) => { //every single function definition in es6 must be wrapped by () first on its argument(s)
                        let listStyle = (t.completed) ? {color: '#999', textDecoration: 'line-through'} : {};
                        return (
                            <ListItem
                                key={t.id}
                                leftCheckbox={<Checkbox defaultChecked={t.completed} onCheck={ev => TodoActions.toggle.triggerAsync(t.id, ev.target.checked)} />}
                                primaryText={t.title}
                                style={listStyle}
                                rightIconButton={
                                <IconMenu iconButtonElement={
                                <IconButton
                                    touch={true}
                                    tooltip="more"
                                    tooltipPosition="bottom-center"
                                >
                                    <MoreVertIcon color={grey400} />
                                </IconButton>
                                }>
                                    <MenuItem onClick={ev => {
                                        self.state.delete = t.id;
                                        TodoActions.delete.confirm({...t, tokens: t})
                                    }}>Delete</MenuItem>
                                </IconMenu>
                                }
                            />
                        )
                    })}
                </List>
                <RSAlert hook="before" childrenHook="confirm" actions={[
                {
                    label: 'Delete',
                    primary: true,
                    onTouchTap: () => {
                        TodoActions.delete.confirmed(this.state.delete);
                    }
                }
                ]}
                />
            </div>
        )
    }
});